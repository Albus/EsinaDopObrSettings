Функция СведенияОВнешнейОбработке() Экспорт 
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.0"; 
	ПараметрыРегистрации.Информация = Метаданные().Синоним + " " + ПараметрыРегистрации.Версия;
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить(); 
	НоваяКоманда.Представление = "Выгрузка номенклатуры"; 
	НоваяКоманда.Идентификатор = "ВыгрузкаНоменклатуры"; 
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь; 
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Настройки"; 
	НоваяКоманда.Идентификатор = "Настройки"; 
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь; 
	
	Возврат ПараметрыРегистрации; 
КонецФункции

Функция HTTPСоединение()
	Возврат Новый HTTPСоединение(
		?(Не ПустаяСтрока(ЭтотОбъект.АдресСервера),ЭтотОбъект.АдресСервера,Неопределено)
	,	?(ЭтотОбъект.ПортСервера,ЭтотОбъект.ПортСервера,Неопределено)
	,	?(Не ПустаяСтрока(ЭтотОбъект.Пользователь),ЭтотОбъект.Пользователь,Неопределено)
	,	?(Не ПустаяСтрока(ЭтотОбъект.Пароль),ЭтотОбъект.Пароль,Неопределено)
	,
	,	0
	,	?(ЭтотОбъект.ИспользоватьTLS,Новый ЗащищенноеСоединениеOpenSSL(),Неопределено));
	//Возврат Новый HTTPСоединение("develop.api.pharmecosystem.ru",443,"1с","Qwerty12!",,,Новый ЗащищенноеСоединениеOpenSSL());
КонецФункции
Функция HTTPЗапрос(Адрес,Поток)
	HTTPЗапрос = Новый HTTPЗапрос(Адрес);
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Поток.ЗакрытьИПолучитьДвоичныеДанные());
	Возврат HTTPЗапрос;
	//Возврат Новый HTTPЗапрос("/api/v1/1c");
КонецФункции

Функция НастройкиСериализацииJSON()
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON();
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON["УниверсальнаяДата"];
	НастройкиСериализацииJSON.СериализовыватьМассивыКакОбъекты = Ложь;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	Возврат НастройкиСериализацииJSON;
КонецФункции
Функция ЗаписьJSON(Поток)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.ОткрытьПоток(Поток,КодировкаТекста.UTF8,Ложь,Новый ПараметрыЗаписиJSON(ПереносСтрокJSON["Нет"],"",Истина,ЭкранированиеСимволовJSON["СимволыВнеASCII"],Истина,Истина,Истина,Истина,Истина));
	Возврат ЗаписьJSON;
КонецФункции

Процедура ПолучитьНастройки(ПараметрыВыполненияКоманды)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ОбщегоНазначения.ЗначениеИзСтрокиXML(
	ПараметрыВыполненияКоманды.ДополнительнаяОбработкаСсылка.ХранилищеНастроек.Получить()));
КонецПроцедуры

Функция Лог(Уровень,Заголовок,Сообщение)
	Заголовки = Новый Массив;
	Заголовки.Добавить("Marketplace");
	Заголовки.Добавить(Заголовок);
	ЗаписьЖурналаРегистрации(СтрСоединить(Заголовки,"."),Уровень,,,Сообщение,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	Возврат Сообщение;
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды) Экспорт
	ПолучитьНастройки(ПараметрыВыполненияКоманды);
	Если ИдентификаторКоманды = "ВыгрузкаНоменклатуры" Тогда
		
			Запрос = Новый Запрос(ЭтотОбъект.ПолучитьМакет("ВыгрузкаНоменклатуры").ПолучитьТекст());
			Запрос = Запрос.Выполнить().Выгрузить();
			
			Поток = Новый ПотокВПамяти();
			ЗаписьJSON = ЗаписьJSON(Поток);
			
			ЗаписатьJSON(ЗаписьJSON,Запрос,НастройкиСериализацииJSON(),"ФункцияПреобразованияJSON_ВыгрузкаНоменклатуры",ЭтотОбъект,Запрос.Колонки);
			ЗаписьJSON.Закрыть(); Запрос = Неопределено; ЗаписьJSON = Неопределено;
			
			HTTPОтвет = HTTPСоединение().ОтправитьДляОбработки(HTTPЗапрос(ЭтотОбъект.КорневойПутьНаСеврере,Поток)).ПолучитьТелоКакСтроку();
	КонецЕсли;
КонецПроцедуры

Функция ФункцияПреобразованияJSON_ВыгрузкаНоменклатуры(Свойство,Значение,Колонки,Отказ) Экспорт
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		Массив = Новый Массив;
		Для Каждого СтрокаТЗ Из Значение Цикл
			Массив.Добавить(СтрокаТЗ);
		КонецЦикла; Возврат Массив;
	ИначеЕсли ТипЗнч(Значение) = Тип("СтрокаТаблицыЗначений") Тогда
		Структура = Новый Структура;
		Для Каждого Колонка Из Колонки Цикл
			Структура.Вставить(Колонка.Имя,XMLСтрока(Значение[Колонка.Имя]));
		КонецЦикла; Свойство = Неопределено; Возврат Структура;
	ИначеЕсли ТипЗнч(Значение) = Тип("КоллекцияКолонокТаблицыЗначений") Тогда
		Структура = Новый Структура;
		Для Каждого Колонка Из Значение Цикл
			Структура.Вставить(Колонка.Имя,Колонка.ТипЗначения.Типы());
		КонецЦикла; Возврат Структура;
	ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
		Возврат XMLТип(Значение).ИмяТипа;
	Иначе Возврат Неопределено;
	КонецЕсли;
КонецФункции
